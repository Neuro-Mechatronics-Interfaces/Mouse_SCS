function [fig,data,T_data] = plotSagaRecruitmentRaw(T, saga, channel, options)
%PLOTSAGARECRUITMENTRAW  Plot recruitment for individual SAGA channel data
%
% Syntax:
%   fig = plotSagaRecruitmentRaw(T, saga, channel);
%   [fig,data,T_data] = plotSagaRecruitmentRaw(__,'Name',value,...);
%
% Inputs:
%   T - "Sweep" table (see loadData outputs)
%   saga - Either `saga.A` or `saga.B` as returned by loadData.
%   channel - Index to `saga.(id).samples` row to plot. 
%               -> 2-65: Typically UNIPOLAR channels
%               -> 66:69: Typically BIPOLAR channels
%
% Options:
%     ApplyCAR (1,1) logical = true;                                        % Set false to turn off CAR
%     Fc (1,:) double = 5;                                                  % Cutoff frequency (Hz); follows following rule: [] == no filter; 1 element: HPF; (Fc_low) 2 elements: BPF (Fc_low, Fc_high)
%     Saga {mustBeTextScalar} = "";                                         % Should be "A" or "B" if non-empty.
%     SampleRate = 4000;                                                    % Sample rate of SAGA system (samples/sec)
%     StimEventDebounce = 0.5;                                              % Seconds between valid "stim onset" events.
%     Subject {mustBeTextScalar} = "";                                      % Name of subject
%     SyncBit (1,1) double {mustBeMember(options.SyncBit,0:15)} = 12;       % Should be a bit index, where 0 is the LSB and 15 is MSB, refers to which TRIGGERS port the sync signal comes in on.
%     Tag {mustBeTextScalar} = "SAGA";                                      % Can manually set tag in title text, if Subject & Saga options not specified.
%     TriggerChannel (1,1) double {mustBePositive, mustBeInteger} = 73;     % This will probably not change.
%     Position (1,4) double = [nan nan nan nan];                            % Figure position -- Should be in INCHES
%     PlotCARRMS (1,1) logical = false;                                     % Set true to figure out which channels should be used in CAR. Once you figure them out, add them to `parameters.m` in relevant structure.
%     ValidCARChannels (1,:) = 2:65;                                        % Only applies if channel is in UNI range and using CAR; use these to exclude/restrict channels in the CAR calculation.
%     YLim (1,2) double = [-60 60];                                         % microvolts
%
% Output:
%   fig - Figure handle generated by this function.
%   data - Data corresponding with each child axes handle.
%   T_data - Metadata specifically rearranged to match elements of data.
%
% See also: Contents, parse_sync_from_artifact_data, saga_channel_2_str_id,
%                     loadData, loadMultiData

arguments
    T
    saga
    channel
    options.ApplyCAR (1,1) logical = true; % Set false to turn off CAR
    options.Fc (1,:) double = 5;  % Cutoff frequency (Hz); follows following rule:[] == no filter; 1 element: HPF; (Fc_low) 2 elements: BPF (Fc_low, Fc_high)
    options.Saga {mustBeTextScalar} = "";
    options.SampleRate = 4000;    % Sample rate of SAGA system (samples/sec)
    options.StimEventDebounce = 0.5; % Seconds between valid "stim onset" events.
    options.Subject {mustBeTextScalar} = "";
    options.SyncBit (1,1) double {mustBeMember(options.SyncBit,0:15)} = 12; % Should be a bit, where 0 is the LSB and 15 is MSB, refers to which TRIGGERS port the sync signal comes in on.
    options.Tag {mustBeTextScalar} = "SAGA";
    options.TriggerChannel (1,1) double {mustBePositive, mustBeInteger} = 73;
    options.Position (1,4) double = [nan nan nan nan]; % Should be in INCHES
    options.PlotCARRMS (1,1) logical = false; % Set true to figure out which channels should be used in CAR. Once you figure them out, add them to `parameters.m` in relevant structure.
    options.ValidCARChannels (1,:) = 2:65;
    options.YLim (1,2) double = [-60 60]; % microamps
end

ApplyFilters = ~isempty(options.Fc) || options.ApplyCAR;

[~,idx] = sort(abs(T.intensity), 'ascend');
saga = saga(idx);
T_data = T(idx,:);
T_data.N = nan(size(T_data,1),1);
i_sweep = ismember(lower(T_data.Properties.VariableNames), 'sweep');
if sum(i_sweep) == 1
    T_data.Properties.VariableNames{i_sweep} = 'key';
end
i_block = ismember(lower(T_data.Properties.VariableNames), 'block');
if sum(i_block) == 1
    T_data.Properties.VariableNames{i_block} = 'run';
    T_data.run = T_data.run + 1;
end

N = numel(saga);

fig = figure('Color', 'w', 'Name', 'Recruitment Curve','Units','Inches');
if ~any(isnan(options.Position))
    fig.Position = options.Position;
else
    switch getenv("COMPUTERNAME")
        case 'NML-NHP'
            fig.Position = [1.5 1.25, 4.25, 8.25];
        otherwise
            fig.Position(3:4) = [4.25, 8.25];
    end
end

L = tiledlayout(fig, ceil(N/2), 2);
stim_event_debounce_samples = options.StimEventDebounce * options.SampleRate;
max_duration = 0;
xl = [0, 10];

if (strlength(options.Subject) > 0) && (strlength(options.Saga) > 0)
    channel_str_id = saga_channel_2_str_id(channel, 'Subject', options.Subject, 'Saga', options.Saga);
else
    channel_str_id = "";
end
data = cell(N,1);
for ii = 1:N
    intensity_label = sprintf('%d \\muA', abs(T_data.intensity(ii)));
    stim_events = bitand(saga(ii).samples(options.TriggerChannel,:),2^options.SyncBit)==0;
    stim_onsets = find(stim_events);
    if isempty(stim_onsets)
        T_data.N(ii) = 0;
        stim_onsets = 1;
        warning('No TRIGGERS for %4.2fmA stimulation condition!\n', round(abs(T_data.intensity(ii)*1e-3),2));
    else
        stim_onsets = stim_onsets([false, diff(stim_onsets) > stim_event_debounce_samples]);
        if isempty(stim_onsets)
            T_data.N(ii) = 0;
            stim_onsets = 1;
            warning('No TRIGGERS for %4.2fmA stimulation condition!\n', round(abs(T_data.intensity(ii)*1e-3),2));
        else
            T_data.N(ii) = numel(stim_onsets);
            max_duration = max((stim_onsets(end) - stim_onsets(1)) ./ options.SampleRate + options.StimEventDebounce, max_duration);
            xl = [0, max_duration];
        end
    end

    if ApplyFilters
        data{ii} = applyFilters(saga(ii).samples, channel, ...
            'ApplyCAR', options.ApplyCAR, ...
            'Fc', options.Fc, ...
            'RMSTitle', intensity_label, ...
            'ValidCARChannels', options.ValidCARChannels, ...
            'PlotCARRMS', options.PlotCARRMS);
    else
        data{ii} = saga(ii).samples(channel,:);
    end
    
    ax = nexttile(L, ii, [1 1]);
    set(ax, 'NextPlot', 'add', 'FontName', 'Tahoma');
    
    t = ((0:(numel(data{ii})-1)) - stim_onsets(1)) / options.SampleRate;
    yyaxis(ax, 'left');
    plot(ax, t, data{ii},'Color','k');
    ylim(ax, options.YLim);
    set(ax,'NextPlot','add','FontName','Tahoma','YColor','k');

    yyaxis(ax, 'right');
    plot(ax, t, stim_events,'Color','b');
    set(ax,'NextPlot','add', ...
        'YTick',[0 1],'YLim',[-0.2, 1.2],'YTickLabel',{'LOW', 'HIGH'}, ...
        'XLim', xl, 'YColor','b');
    

    title(ax, sprintf('%s | N = %d Triggers', intensity_label, T_data.N(ii)), ...
        'FontName', 'Tahoma', 'Color', 'k');
end
if strlength(channel_str_id) > 0
    title(L, sprintf('Set %d | %s | %s', T_data.key(1), options.Subject, channel_str_id), ...
        'FontName', 'Tahoma', 'Color', 'k');
else
    title(L, sprintf('Set %d | %s | Channel-%d', T_data.keep(1), options.Tag, channel), ...
        'FontName', 'Tahoma', 'Color', 'k');
end
linkaxes(findobj(L.Children,'Type','axes'),'xy');
ylabel(L, 'EMG (\muV)', 'FontName','Tahoma','Color', 'k');
xlabel(L, 'Time (s)', 'FontName','Tahoma','Color','k');

end